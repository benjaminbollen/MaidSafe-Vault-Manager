/*  Copyright 2012 MaidSafe.net limited

    This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,
    version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
    licence you accepted on initial access to the Software (the "Licences").

    By contributing code to the MaidSafe Software, or to this project generally, you agree to be
    bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root
    directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also
    available at: http://www.maidsafe.net/licenses

    Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed
    under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.

    See the Licences for the specific language governing permissions and limitations relating to
    use of the MaidSafe Software.                                                                 */

package maidsafe.vault_manager.protobuf;

// All following messages are serialised into the payload field, and the message type added.
message WrapperMessage {
  required int32 type = 1;
  optional bytes payload = 2;
  optional bytes message_signature = 3;
}

// VaultManager to Client
message Challenge {
  required bytes plaintext = 1;
}

// Client to VaultManager
message ChallengeResponse {
  required bytes public_maid_name = 1;
  required bytes public_maid_value = 2;
  required bytes signature = 3;
}

// TESTING only
message PublicPmidList {
  message PublicPmid {
    required bytes public_pmid_name = 1;
    required bytes public_pmid = 2;
  }
  repeated PublicPmid public_pmids = 1;
}

// Client to VaultManager
// VaultManager starts a vault.  The new vault will send a VaultStarted to the VaultManager which
// will trigger the StartVaultResponse in reply this message.
message StartVaultRequest {
  required bytes label = 1;
  optional bytes vault_dir = 2;
  required uint64 max_disk_usage = 3;
  optional int32 pmid_list_index = 4;  // TESTING only
}

// Client to VaultManager
message TakeOwnershipRequest {
  required bytes label = 1;
  required bytes vault_dir = 2;
  required uint64 max_disk_usage = 3;
}

// VaultManager to Client
message VaultRunningResponse {
  message VaultKeys {
    required bytes AES256Key = 1;
    required bytes AES256IV = 2;
    required bytes encrypted_anpmid = 3;
    required bytes encrypted_pmid = 4;
  }
  required bytes label = 1;
  optional bytes serialised_maidsafe_error = 2;
  optional VaultKeys vault_keys = 3;
}

// Vault to VaultManager
message VaultStarted {
  required uint64 process_id = 1;
}

// VaultManager to Vault
message VaultStartedResponse {
  required bytes AES256Key = 1;
  required bytes AES256IV = 2;
  required bytes encrypted_pmid = 3;
  required bytes vault_dir = 4;
  required uint64 max_disk_usage = 5;
  required bytes serialised_bootstrap_contacts = 6;
  optional bytes serialised_public_pmids = 7;  // TESTING only
}

// Client to VaultManager and VaultManager to Vault
message MaxDiskUsageUpdate {
  required uint64 max_disk_usage = 1;
}

// Vault to VaultManager and VaultManager to Client
message BootstrapContact {
  required bytes serialised_contact = 1;
}

message BootstrapContactsResponse {
  required bytes serialised_bootstrap_contacts = 1;
}
